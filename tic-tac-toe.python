import numpy as np

# Function to initialize the board
def initialize_board():
    return np.full((3, 3), ' ')

# Function to display the board
def display_board(board):
    for row in board:
        print('|'.join(row))
        print('-' * 5)

# Function to check for a winner
def check_winner(board):
    # Check rows and columns
    for i in range(3):
        if np.all(board[i, :] == board[i, 0]) and board[i, 0] != ' ':
            return board[i, 0]
        if np.all(board[:, i] == board[0, i]) and board[0, i] != ' ':
            return board[0, i]
    # Check diagonals
    if board[0, 0] == board[1, 1] == board[2, 2] and board[0, 0] != ' ':
        return board[0, 0]
    if board[0, 2] == board[1, 1] == board[2, 0] and board[0, 2] != ' ':
        return board[0, 2]
    return None

# Function to check if the board is full
def is_full(board):
    return not np.any(board == ' ')

# Minimax algorithm for AI move
def minimax(board, is_maximizing, depth=0):
    winner = check_winner(board)
    if winner == 'X':  # X is maximizing player
        return 10 - depth
    elif winner == 'O':  # O is minimizing player
        return depth - 10
    elif is_full(board):
        return 0  # Draw

    if is_maximizing:
        best_score = -np.inf
        for i in range(3):
            for j in range(3):
                if board[i, j] == ' ':
                    board[i, j] = 'X'
                    score = minimax(board, False, depth + 1)
                    board[i, j] = ' '
                    best_score = max(best_score, score)
        return best_score
    else:
        best_score = np.inf
        for i in range(3):
            for j in range(3):
                if board[i, j] == ' ':
                    board[i, j] = 'O'
                    score = minimax(board, True, depth + 1)
                    board[i, j] = ' '
                    best_score = min(best_score, score)
        return best_score

# Function to find the best move for a player
def find_best_move(board, player):
    best_score = -np.inf if player == 'X' else np.inf
    best_move = None
    for i in range(3):
        for j in range(3):
            if board[i, j] == ' ':
                board[i, j] = player
                score = minimax(board, player == 'O', depth=0)
                board[i, j] = ' '
                if (player == 'X' and score > best_score) or (player == 'O' and score < best_score):
                    best_score = score
                    best_move = (i, j)
    return best_move

# Function to handle the player's move
def player_move(board, player):
    while True:
        try:
            move = input("Enter your move (row and column separated by space, e.g., '1 2'): ")
            row, col = map(int, move.split())
            if board[row, col] == ' ':
                board[row, col] = player
                break
            else:
                print("Cell is already occupied. Try again.")
        except (ValueError, IndexError):
            print("Invalid input. Please enter row and column as numbers between 0 and 2.")

# Main game loop
def play_tic_tac_toe():
    while True:
        board = initialize_board()
        print("Welcome to Tic-Tac-Toe!")
        player = input("Do you want to play as X or O? ").upper()
        while player not in ['X', 'O']:
            player = input("Invalid choice. Please enter X or O: ").upper()
        
        ai = 'O' if player == 'X' else 'X'
        current_player = 'X'  # X always starts the game

        print("You are playing as", player)
        display_board(board)
        print("\n")

        while True:
            if current_player == player:
                print("Your turn:")
                player_move(board, player)
            else:
                print(f"AI ({ai})'s turn:")
                move = find_best_move(board, ai)
                if move:
                    board[move[0], move[1]] = ai

            display_board(board)
            print("\n")

            winner = check_winner(board)
            if winner:
                if winner == player:
                    print("Congratulations! You win!")
                elif winner == ai:
                    print("AI wins! Better luck next time.")
                break
            elif is_full(board):
                print("It's a draw!")
                break

            # Switch player
            current_player = 'O' if current_player == 'X' else 'X'
        
        # Ask to play again
        play_again = input("Do you want to play again? (Y/N): ").upper()
        while play_again not in ['Y', 'N']:
            play_again = input("Invalid input. Please enter Y or N: ").upper()
        if play_again == 'N':
            print("Thanks for playing!")
            break

# Run the game
play_tic_tac_toe()